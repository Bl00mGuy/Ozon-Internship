// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/api.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UrlManager_ShortenUrl_FullMethodName = "/proto.UrlManager/ShortenUrl"
	UrlManager_ExpandUrl_FullMethodName  = "/proto.UrlManager/ExpandUrl"
)

// UrlManagerClient is the client API for UrlManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для управления URL
type UrlManagerClient interface {
	// RPC для создания короткой версии URL
	ShortenUrl(ctx context.Context, in *UrlShorteningRequest, opts ...grpc.CallOption) (*ShorteningResult, error)
	// RPC для извлечения оригинального URL по его сокращенной версии
	ExpandUrl(ctx context.Context, in *ShortenedUrlRequest, opts ...grpc.CallOption) (*ExpandedUrlResult, error)
}

type urlManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlManagerClient(cc grpc.ClientConnInterface) UrlManagerClient {
	return &urlManagerClient{cc}
}

func (c *urlManagerClient) ShortenUrl(ctx context.Context, in *UrlShorteningRequest, opts ...grpc.CallOption) (*ShorteningResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShorteningResult)
	err := c.cc.Invoke(ctx, UrlManager_ShortenUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlManagerClient) ExpandUrl(ctx context.Context, in *ShortenedUrlRequest, opts ...grpc.CallOption) (*ExpandedUrlResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandedUrlResult)
	err := c.cc.Invoke(ctx, UrlManager_ExpandUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlManagerServer is the server API for UrlManager service.
// All implementations must embed UnimplementedUrlManagerServer
// for forward compatibility.
//
// Сервис для управления URL
type UrlManagerServer interface {
	// RPC для создания короткой версии URL
	ShortenUrl(context.Context, *UrlShorteningRequest) (*ShorteningResult, error)
	// RPC для извлечения оригинального URL по его сокращенной версии
	ExpandUrl(context.Context, *ShortenedUrlRequest) (*ExpandedUrlResult, error)
	mustEmbedUnimplementedUrlManagerServer()
}

// UnimplementedUrlManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUrlManagerServer struct{}

func (UnimplementedUrlManagerServer) ShortenUrl(context.Context, *UrlShorteningRequest) (*ShorteningResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenUrl not implemented")
}
func (UnimplementedUrlManagerServer) ExpandUrl(context.Context, *ShortenedUrlRequest) (*ExpandedUrlResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandUrl not implemented")
}
func (UnimplementedUrlManagerServer) mustEmbedUnimplementedUrlManagerServer() {}
func (UnimplementedUrlManagerServer) testEmbeddedByValue()                    {}

// UnsafeUrlManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlManagerServer will
// result in compilation errors.
type UnsafeUrlManagerServer interface {
	mustEmbedUnimplementedUrlManagerServer()
}

func RegisterUrlManagerServer(s grpc.ServiceRegistrar, srv UrlManagerServer) {
	// If the following call pancis, it indicates UnimplementedUrlManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UrlManager_ServiceDesc, srv)
}

func _UrlManager_ShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlShorteningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlManagerServer).ShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlManager_ShortenUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlManagerServer).ShortenUrl(ctx, req.(*UrlShorteningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlManager_ExpandUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlManagerServer).ExpandUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlManager_ExpandUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlManagerServer).ExpandUrl(ctx, req.(*ShortenedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlManager_ServiceDesc is the grpc.ServiceDesc for UrlManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UrlManager",
	HandlerType: (*UrlManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenUrl",
			Handler:    _UrlManager_ShortenUrl_Handler,
		},
		{
			MethodName: "ExpandUrl",
			Handler:    _UrlManager_ExpandUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
